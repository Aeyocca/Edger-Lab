Look across A. thaliana for CNS differences / hopefully functional enrichment for stress responsive genes
  - Start with 18 accessions, MCScanX call orthologs, look upstream
  - CoGe / progressiveCactus
  - Pull coordinates out / take from GFF file, pull sequences upstream, blast search above a certain bit score
  - Make CNS GFF file, treat like exon, search for synteny
  - Presence / absence or SNPs

Alrighty, I think I will just try and familiarize myself with some of CoGe's tools. Do a comparison between Col-0 and just three other accessions taken from: Multiple reference genomes and transcriptomes for Arabidopsis thaliana. Xiangchao, Gan, et. al. (2011)

Three other accessions: Tsu-0 (Japan) CS6874, Can-0 (Canary Isles) CS6660, Oy-0 (Norway) CS6824

Download the full genome and upload to CoGe


$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/fasta/MASKED/tsu_0.v7.PR_in_lowercase.fas
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/fasta/MASKED/can_0.v7.PR_in_lowercase.fas
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/fasta/MASKED/oy_0.v7.PR_in_lowercase.fas

From 1001 Genomes website:
files of annotatations (GFF3, GTF and other formats)
denovo annotations predicted using mGene.ngs and the seedling RNA-seq data, independently of the TAIR10 annotations. This directory contains de novo gene annotations for the 19 accessions (*..*). We provide two formats (gene finder format version 3: *.gff3 and matlab/octave data files: *.mat) in two coordinate systems (reference genome: *.Col-0.{gff3,mat} and strain coordinate system: rest).

Four possible data files: 
	
http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.Col-0.gff3.bz2

http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.Col-0.mat

http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.gff3.bz2

http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.mat

Since we want to do some CNS search I think it will be best to get in Col-0 coordinates... but we want to extract regions upstream from full sequence files which correspond to given reference sequence.. alright in that case then we should take the file if gff3 format in the strain coordinate system (4th one) yea that sounds good.

$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Oy_0.gff3.bz2
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.gff3.bz2
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Tsu_0.gff3.bz2

2-07-18
upload files to CoGe, not sure what to put for version so I'm just labeling them Gan_2011 for version and source

Seems like loading genome annotation did not work, try unzipping locally then uploading see if that works:
$ bzip2 -d <file_name>

uploading new annotations:
Can-0: https://genomevolution.org/r/10gzd
Oy-0: https://genomevolution.org/r/10gzl
Tsu-0: https://genomevolution.org/r/10gzn

did not work:
upload to hpcc, dos2unix, then try and upload to CoGe, idk what could be wrong
Can-0: https://genomevolution.org/r/10gzo
Oy-0: https://genomevolution.org/r/10gzp
Tsu-0: https://genomevolution.org/r/10gzq

Nope, nevermind seemed they all worked fine, look up how to remove a few

SynMap between Can-0 and Oy-0: https://genomevolution.org/r/10gzz
Just playing around for now, need to think of how to compare CNSs..... first need to call syntenic orthologs... shouldn't they carry the same annotation though?

I am a little concerned the genome size of these accessions is ~117Mb, seems pretty small may be incomplete. Well Tair10 is 119 so I think its fine

Example of synmap times:
Generating fasta file				Completed in 1m 54.0s
Generating fasta file				Completed in 1m 48.0s
Generating LastDB				Completed in 2m 0.6s
Running genome comparison			Completed in 28.8s
Creating BED files				Completed in 20.2s
Filtering tandem dups				Completed in 36.1s
Formatting for DAGChainer			Completed in 0.7s
Converting to genomic order			Completed in 1.3s
Running DAGChainer				Completed in 4.0s
Converting to genomic coordinates		Completed in 0.3s
Generating svg image				Completed in 1.0s
Generating images				Completed in 1.1s
Processing Subject Tandem Duplicate File	Completed in 0.8s
Processing Query Tandem Duplicate File		Completed in 0.8s
Generating GEvo links to condensed file 	Completed in 1.0s


From what I read online, it seems DAGChainer output in genomic coordinates is what I want, Example of the file format found: https://genomevolution.org/wiki/index.php/SynMap

DAGChainer output should give me the list of syntenic orthologs that I should use to search for CNSs. Hmm, how to do multispecies comparisons, should I try to create the DAGChainer pipeline locally or what?? Do I call all syntenic orthologs back to Col-0 or is there a way to call them across all accessions??

I have: a way to call syntenic orthologs between two organisms. Pretty slow though, next steps:
	1.) parse file to create file in the format Col-0 id, start, stop, Acc id, start, stop
		- Think a little more what info this file needs
		- Add in info for all accessions in same file, I think just IDs starts and stops will be needed wrench in the plan though is the annotation. They are not just full genes, exon / CDS information, how to parse????
	2.) Extract orthologous gene pairs for which we have CNSs called
	3.) Extract 5kb upstream all gene pairs
		- That shouldn't be too hard to get in fasta format, right?
	4.) what format do I need to compare CNSs? what comparisons do I want to do?
		- presence / absence... HOW?
			- Look in regions upstream orthologous gene pairs. If CNS located in Col-0, search region upstream Accession for this CNS, if exact match, then present, if no exact match, then absent / mutated
			- Blast the CNS if present against upstream ortholog, look for good hit, yea this later part is coming together nicely, the hard part is high throughput calling orthologs, extracting exact gene start information
			
First step is to parse DAGChainer output and create syntenic ortholog file??? Actually shouldn't that file be sufficient for the next step? Could think of a way to consolidate them all to one file

Will they all be 1:1? I think this filters out tandem duplicates so they should be, but across other species they might be because of duplication / losses / differential retention yada yada yada. Will be easier to rewrite then start from scratch so lets start under some assumptions and just get writing

2.) Extract orthologous gene pairs for which we have CNSs called
	- Create list of AT Col-0 annotated gene IDs for which there is a CNS
		- call it col_0_gene_cns.txt
$ grep "AT[1-5]" CNS_Brassicaceae_65K_4Alan.txt | cut -d"_" -f2 | sort | uniq | cat > col_0_gene_cns.txt

gives us a sorted list of all AT Col-0 gene IDs with a cns, the rest in the file were rna associated (~1500) or cryptic (72)

$ wc -l col_0_gene_cns.txt
11630 col_0_gene_cns.txt


This file can be used to parse the DAGChainer output to extract syntenic ortholog pair coordinates, final output from this extraction should be fasta format >accession_gene_id\n5kb upstream

Do I really want fasta format? To blast I want to make sure my subject matches what the query is supposed to be. I guess I could blast against the whole thing and parse the blast output for hits within the desired subject

Yea blast complete set of CNSs against complete set of upstream regions, Then for each CNS, if sig hit in Col-0 subject, search for hit in desired accession subject. If hit present above certain bit score, add to count and probably print out to a file syntenic pair with hit output and what the CNS is, have second file for syntenic pair for which cns was present in col-0 but absent in accession, for first run just throw everything that didn't hit in every accession to this file.

Lets roll through this process for Col-0 against Can-0.

Syn-map Col-0 against Can-0: https://genomevolution.org/r/10h2r

Print out only lines that have one of the AT col-0 genes as part of a pair. Nice done

Next step use the cns_dagchainer file to create the fasta file containing upstream sequences. That will be a little more difficult. Could it be taken from the whole genome file from each accession?? seems to be the only way to do it, check out the whole genome file for how we want to get the sequences. There has to be a program that does it for you / faster right?

Hmm, >Chr#
Then X characters per line, could do something with that, multiply to get to numbers you need, could program it in perl but would seriously take forever I believe.. Ask if there is a quicker way

	faidx
	samtools faidx <ref.fasta> [region1 [...]]

	Index reference sequence in the FASTA format or extract subsequence from indexed reference sequence. If no region is specified, 	faidx will index the file and create <ref.fasta>.fai on the disk. If regions are specified, the subsequences will be retrieved 		and printed to stdout in the FASTA format.

	The input file can be compressed in the BGZF format.

	The sequences in the input file should all have different names. If they do not, indexing will emit a warning about duplicate 		sequences and retrieval will only produce subsequences from the first sequence with the duplicated name.

I'm going to do this....

[yoccaala@dev-intel16-k80 full_genome_sequences]$ module load SAMTools/1.2
[yoccaala@dev-intel16-k80 full_genome_sequences]$ samtools faidx can_0.v7.PR_inlowercase.fas
#builds index file <fasta>.fai
[yoccaala@dev-intel16-k80 full_genome_sequences]$ samtools faidx can_0.v7.PR_inlowercase.fas Chr1:1042772-1043550
#outputs to stdout what you want... couldn't find a way to specify output file, would have to pipe

Alrighty, now we need to write scripty script script. For each line in cns_dagchainer file, go to gene ID, check which accession it belongs to, open that accessions full genome sequence, extract 5kb upstream from start site if + strand, 5kb downstream end site if - strand. Do some manual inspection to see if +/- strand matters

a16911_1	1||3760||5630||AT1G01010.1||1||CDS||306206330||1||99.84	3760	5630	b37385_1	1||3437||5287||CDS:AT1G01010-Can_0-mGene.NGS.1||1||CDS||1719340271||1||99.84	3437	5287	1.000000e-250	50
a16911_1	1||6915||8666||AT1G01020.1||-1||CDS||306206333||2||99.34	8666	6915	b37385_1	1||6613||8359||CDS:AT1G01020-Can_0-mGene.NGS.1||-1||CDS||1719340272||4||99.34	8359	6613	2.200000e-209	100

Continued on 02-08-18
Download TAIR10 genome:
[yoccaala@dev-intel14-k20 full_genome_sequences]$ curl -O https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas
Archive original chromosome designations here, change to Chr1, etc for ease later:
1:>1 CHROMOSOME dumped from ADB: Feb/3/09 16:9; last updated: 2009-02-02
385163:>2 CHROMOSOME dumped from ADB: Feb/3/09 16:10; last updated: 2009-02-02
634510:>3 CHROMOSOME dumped from ADB: Feb/3/09 16:10; last updated: 2009-02-02
931471:>4 CHROMOSOME dumped from ADB: Feb/3/09 16:10; last updated: 2009-02-02
1166726:>5 CHROMOSOME dumped from ADB: Feb/3/09 16:10; last updated: 2009-02-02
1508190:>mitochondria CHROMOSOME dumped from ADB: Feb/3/09 16:10; last updated: 2005-06-03
1512836:>chloroplast CHROMOSOME dumped from ADB: Feb/3/09 16:10; last updated: 2005-06-03

Examples of + / - strand:
AT1G01010 + 3760||5630
CNS:
	>33231_AT1G01010
	GAGTAAAATCTTTTCTTACAAGGGAAGTCCC
upstream in Col-0 should be 1-3760, just check the whole gene incase its intronic
[yoccaala@dev-intel14-k20 full_genome_sequences]$ samtools faidx TAIR10_chr_all.fas Chr1:1-10000 | cat > temp.txt
	Found it, nice, one slight problem here is that the less function did not find the full sequence as it was split across two lines, something to keep in mind
	
	
AT1G01020 -	6915||8666
CNS:
	>4425_AT1G01020
	TTAGGGTTTATAAGATTCTCTATTAAATTTCTTCAAAGTTTCCATCTT
5kb upstream assuming + strand:
Couldn't find immediately, check this way upstream( 8666-13666 )
Not found the above way, check RevComp:
	AAGATGGAAACTTTGAAGAAATTTAATAGAGAATCTTATAAACCCTAA
Hmm... not finding anything
even better, the TAIR10.gff seems different from the output of DAGChainer, well maybe it only lists where they are similar rather than where the genes are

Try harder to find this CNS, give a broader range another go, then try the other CNS associated with this gene, then try another gene with >2 CNS, then if that fails blast it

Found it, importantly in revcomp form and "downstream" the gene, so it is how it intuitively should be, really hope there is an easy blast option for reverse complementing

Hmm, this one was ~ 8490-8520 which seems to be intronic. Maybe it would be best to extract whole gene sequence then classify as upstream, downstream, or intronic


Alrighty, moving forward we got: minus strand considerations, pull entire sequence +/- 5kb either side and classify 


Next: I think I am ready to start building pipeline from just these two accession comparisons for now starting from the DAGChainer file

Take DAGChainer file and extract information, Delve into full genomes, now have fasta with synt ortholog stuff that should have CNSs, blast CNS file against those two fasta files and then damn going to be difficult to go from there, walk through it later today.

O hey its later today. lets get crackin:
First perl script should: Take DAGChainer file as input, read into full genomes, output two fasta files, one for each accession.
I think that is a good first step, could have a second step in the bash script that builds databases from them / blasts CNSs against them and I think the last step would be parsing the blast output. Think about what info you would need from the blast output:
- query CNS, if it hit significantly in Col-0 accession in the right place, then if it hit in other accession in the right place


Uhhhhhh, dagchainer cns stuff only has col-0 stuff on the first 2 chromosomes... idk if thats even a syntenic ortholog list but o whale like I said fixing is easier than building
	- DAGChainer pre-cns filtered file also seems the same way, hmmmmmm
	
I thought you could use SAMTools within a perl script, can't find out how, could always just write all the coordinates I want paired with things and make fasta creation a separate step

Alrighty, run really quick with like 5 lines of DAGChainer cns output
Yea it looks like the samtools thing is not working, actually write a short script to test that
O shit little test worked! Think I need that pipe character I guess

example errors:
Could not load fai index of /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_sequences/full                                                                                                    _genome_sequences/TAIR10_chr_all.fas
[fai_load] build FASTA index.
[fai_build] fail to open the FASTA file /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_se                                                                                                    quences/full_genome_sequences/can_0.v7.PR_in_lowercase.fas
[fai_load] fail to open FASTA index.
Could not load fai index of /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_sequences/full                                                                                                    _genome_sequences/can_0.v7.PR_in_lowercase.fas
Argument "|" isn't numeric in subtraction (-) at ./ext_surr_regions.pl line 40, <$dag_fh> li                                                                                                    ne 10.
Argument "|" isn't numeric in subtraction (-) at ./ext_surr_regions.pl line 42, <$dag_fh> li                                                                                                    ne 10.
[fai_load] build FASTA index.
[fai_build] fail to open the FASTA file /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_se                                                                                                    quences/full_genome_sequences/TAIR10_chr_all.fas
[fai_load] fail to open FASTA index.
Could not load fai index of /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_sequences/full                                                                                                    _genome_sequences/TAIR10_chr_all.fas
[fai_load] build FASTA index.
[fai_build] fail to open the FASTA file /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_se                                                                                                    quences/full_genome_sequences/can_0.v7.PR_in_lowercase.fas
[fai_load] fail to open FASTA index.
Could not load fai index of /mnt/home/yoccaala/04_Edger/athal_cns/full_genome_sequences/full                                                                                                    _genome_sequences/can_0.v7.PR_in_lowercase.fas

2-09-18
Need to:
	- Change path specifications, right now have double full_genome_sequences thing going on
	- write in to check the value of all variables to see if the split thing is still fucking up ecause it looks like it might be... That should be it as far as these messages show
	
	
Alrighty then.... Fixed most of it, last problem: if X kb exceeds chromosome length (+ or -)	
We fixed the too low, but not the too high, forget about it for now. lets build a db, 

Next:
build db from these recently made fasta files, blast CNS file against these fasta files, have output in m8 format and check it out

EXAMPLES
[yoccaala@dev-intel14 blast_run]$ formatdb -i MotifsPlantPanCH2_Database.txt -p F -o T -n Motifs_db

EXAMPLE FROM qsub_blastall_ZMB73_TIGR.sh:
cd /mnt/home/yoccaala/01_VanBuren/mcscan/MCScanX/data
module load BLAST
blastall -p blastp -d "ZmB73_db Osativa_db_TIGR Bdistachyon_192_db Sbicolor_79_db" -i ZmB73_peptide.fa -e 1e-5 -b 5 -v 5 -m 8 -o ZmB73.blast3

9846_AT4G28950: 15983_AT1G73240: 21642_AT3G45590: 23456_AT2G13790: 34095_AT4G28910: 46022_AT3G53460: 50208_AT4G29940:	59537_AT1G73550:	62875_AT3G09340

All these CNSs are TA repeats, manually inspected them all
I think I want to modify ext.pl script to include gene start / stop information so I can more easily classify it was up / down / intronic. Also this is where I should think about rev comp. I really should do the rev comp in the ext script right?? Shouldn't be too hard to take sequence and rev comp it then print to fasta. The problem is the CNSs need rev comped right???? Shit, well maybe not, could just revcomp them, should be able to find strand info for all the genes

2-10-18

Use command line to cut out info from GFF file, 

$ grep "gene" TAIR10_GFF3_genes.gff | cut -f7,9 | awk -F ";" '{print $1}' | sed 's/ID=//' | cat > TAIR10_gene_strands.txt

$ wc -l TAIR10_gene_strands.txt
37513 TAIR10_gene_strands.txt

hmmm, maybe some duplicates?? uniq showed no duplicates so... I guess thats fine, Ah, at the bottom of the file, there are a bunch of ATM annotations, that should be fine, will not affect the next step. 
here is example of what will be used by perl script to revcomp the necessary CNSs:
+       AT1G01010
-       AT1G01020
-       AT1G01030
+       AT1G01040
+       AT1G01046

Etc.

02-12-18

Woo hoo, looks like I got it to work:
[yoccaala@dev-intel14 athal_cns]$ ./rev_comp_cns.pl -g gene_models/TAIR10_gene_strands.txt -c CNS_Brassicaceae_65K_4Alan.txt -o CNS_rev_comp.txt
all minus strand genes found: 32370

It says minus strand genes, but its really minus strand CNSs, see if it got all the CNSs[yoccaala@dev-intel14 athal_cns]$ wc -l CNS_rev_comp.txt
126648 CNS_rev_comp.txt
[yoccaala@dev-intel14 athal_cns]$ wc -l CNS_Brassicaceae_65K_4Alan.txt
131069 CNS_Brassicaceae_65K_4Alan.txt

hmmmm........... Looks like did not find the rna CNSs, don't really think I need them for this analysis so should probably just move on, but I think I fixed it in the script, lets check, seems like most missing are RNA CNSs, still ~ 100 missing, might be because Gene is not in the strand info file, try and run it with the change that should capture RNA CNSs

nope didn't work
Got it, for some reason there is an odd number of lines in the Brassicaceae CNS file, o whale, lets manually check a few CNSs to make sure they were rev comped.

-	AT1G01420
-	AT1G01430
-	AT1G01440

Something wrong with my rev comps, back to the drawing board, work on small script to get it to work. I hope its something wrong with the rev comp method and not the loop control

Yea it was the reverse comp way, my new way is so complicated hahahahahahha, o well I am confident it works

Manually checked a few, looks like I do have some reverse complimented CNSs, woo hooo, blast next CNS as query against both accessions as reference
[yoccaala@dev-intel14 athal_cns]$ ./rev_comp_cns.pl -g gene_models/TAIR10_gene_strands.txt -c CNS_Brassicaceae_65K_4Alan.txt -o CNS_rev_comp.txt

Running ext_surrounding_regions.pl should spit out fas_1 and fas_2 files, just keeping these file names for this rough run through, build db for both of these, hmm could blast against both and then parse output, now time to just stare at blast output to think of how to parse:
What we want blast output to tell us:
	- For each gene that has a CNS:
		- Is there a significant hit in Col-0?
		- Is the significant hit in the right place?
		- If found in Col-0:
			- Is there a sig hit in the same region
			- Is that hit the same CNS?
			- If found: count
			- If not found: count for now, could pull out later if needed
1
Query
The query sequence id
2
Subject
The matching subject sequence id
3
% id
4
alignment length
5
mistmatches
6
gap openings
7
q.start
8
q.end
9
s.start
10
s.end
11
e-value
12
bit score

Alrighty, read each line, get 
CNS_name	Ext_region_name (ex AT1G01030.1_6864_16864:6864-16864)	id%	length	mismatch	gap openings	qstart (CNS)	qstop (CNS)	**s start (Gene region)	**s stop (Gene region)	e-value	bit score

Awesome,... If bit score / e-value meets criteria:
	- If CNS_name extracted gene name matches Ext_region_name ext gene name
		- read gff strand info file to see if classify up or down stream, 
		- extract coordinates, parse to check if up / down / internal based on strand info, add to count
Get a little wonky for comparison:
	- I think if search multiple things at a time, can check accession, look at accession ext gene name ex.
		- rerun ext surrounding regions
		
To do:
	- rerun ext surrounding regions on the whole genomes
	- Check out accession gene names
	- Think of regex to extract and compare
	
Looks like all accession gene names from Gan et al (2011) are in the format: CDS:AT1G01010-Can_0-mGene.NGS.1
TAIR10 gene names format: AT1G01010.1
	- looks like they all have a decimal designation, not all of the gene strand gff file gene names have it but some do

Alrighty, looks like we can conditional if starts with CDS for it being in another accession... Need dynamic way to call accession though so think should just take everything after the hypen in gene name

	- Loop through Col-0 blast and load in those CNSs with hit in the right place into a hash and set to True, or load into array
	- Read each line in accession blast, if CNS exists in hash / array... hmmm, no should loop through each CNS..., no because if we hit the CNS we can switch that CNS to false / already hit and count those that did not hit, yessss
	- Make 3 different hashes, one upstream, one downstream, one intronic. wherever blast hit, check different hash, add to count, conditional count for which accession.... could write counts out.. heres the thing I think I want to do single blast against all accessions, maybe it is better to do separate blast I guess, then this perl script would run separate times. Thats ok for now I guess
	- Lets get writing! If we are going to do the separate blast thing, then we should create a separate one to do Col-0 blast parsing so much smaller file to load into hash

Checking to see if strand info file has all genes represented without dots (do have them with decimals but I think all those with decimals have replicates without:
sed 's/\..//' test_gene_strands.txt | cat > test_dotless.txt
$ cut -f2 test_dotless.txt | sort | uniq | cat > test_uniq.txt
$ grep -c "\." test_gene_strands.txt
3911
$ wc -l test_uniq.txt
33602 test_uniq.txt
$ wc -l TAIR10_gene_strands.txt
37513 TAIR10_gene_strands.txt
and 3911+33602 = 37513 so good, all those with decimals are replicated without decimals.. well they are replicated, I amd going to assume they are replicated without decimals.... I did another check I think we are good

my $bs_count = 0;
my $gene_match_count = 0;
my $out_of_bounds = 0;
my $downstream_hit = 0;
my $intron_hit = 0;
my $upstream_hit = 0;
my $not_in_strand = 0;


[yoccaala@dev-intel14 athal_cns]$ ./parse_col0_blast.pl -b first_run_blast.blast -g gene_models/TAIR10_gene_strands.txt -o test.txt
Meets bit score criteria: 79
CNS matches gene ID: 44
Blast hit lies outside 5kb up/downstream of gene: 34
CNS with a sig blast hit 5kb upstream: 3
CNS with a sig blast hit inside the gene: 0
CNS with a sig blast hit 5kb downstream: 6
Gene not found in the gene strand file: 1

Thats with bitscore > 40 so probably a bit high,,, lol maybe not the blast file was only on the first like 50 DAGChainer hits, so need to blast rev_comp_cns against full TAIR10 genome

lowest bit score is 48.1 which corresponds to e-value of about 4e-6, about 45k hits... should be more but o whale, should think about lowering stringency. this will be a good test for the perl script though so go ahead

Ahh, just blasted against whole genome, but need to blast against fas_col0_ext.txt

[yoccaala@dev-intel14 athal_cns]$ formatdb -i fas_col0_ext.txt -p F -o T -n full_genome_sequences/database/Col0_db
[yoccaala@dev-intel14 athal_cns]$ blastall -p blastn -d "full_genome_sequences/database/Col0_db" -i CNS_rev_comp.txt -e 1e-5 -b 5 -v 5 -m 8 -o TAIR10_cns_rev_comp.blast

wc -l is ~35k, would like it to be much bigger, should have hits for all 65k CNSs

[yoccaala@dev-intel14 athal_cns]$ wc -l TAIR10_cns_rev_comp.blast
34462 TAIR10_cns_rev_comp.blast
[yoccaala@dev-intel14 athal_cns]$ wc -l CNS_rev_comp.txt
131070 CNS_rev_comp.txt
[yoccaala@dev-intel14 athal_cns]$ ./parse_col0_blast.pl -b TAIR10_cns_rev_comp.blast -g gene_models/TAIR10_gene_strands.txt -o test.txt
Meets bit score criteria: 34462
CNS matches gene ID: 17821
Blast hit lies outside 5kb up/downstream of gene: 16970
CNS with a sig blast hit 5kb upstream: 6
CNS with a sig blast hit inside the gene: 0
CNS with a sig blast hit 5kb downstream: 12
Gene not found in the gene strand file: 833

Not very good, I don't believe this stuff, aha, important tidbit, I have it checking genome coordinates against subject start / stop, I'm blasting against a fasta file that goes from -5k to +5kb already, so 1-5000 is 5kb upstream for + strand genes as far as s_start and s_stop are concerned, so how to gauge max, need to do the difference of the written in coordinates -10k or something there is a way to do it. I am also concerned we are not hitting rev comped CNSs, manually check for a few

Looks like the CNSs are hitting, they are hitting to genes they are not annotated for though for sure, ask about that, Ahah, looks like pretty good overlap when assigning to multiple genes, so some of the multiple hits are really just duplicates, why don't all my CNSs have a significant blast hit thats what I want to know..
I think it is because the ext_surrounding sequences takes from the DAGChainer file and that may be incomplete, DAGChainer file has list of syntenic orthologs between Can-0 and Col-0....

Should think about comparing DAGChainer output to gene_strand because gene_strand file should be comprehensive as it takes anything annotated as gene out of the GFF, maybe thats how I should ext surrounding sequences, but then miss some information I guess.. uhhhhgg

Yea there are only about 5k lines in the DAGChainer output after filtering for lines that contain a gene with an annotated cns
reran and looks like ~ 26k lines in the file now... ugh
