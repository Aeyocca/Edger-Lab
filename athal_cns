Look across A. thaliana for CNS differences / hopefully functional enrichment for stress responsive genes
  - Start with 18 accessions, MCScanX call orthologs, look upstream
  - CoGe / progressiveCactus
  - Pull coordinates out / take from GFF file, pull sequences upstream, blast search above a certain bit score
  - Make CNS GFF file, treat like exon, search for synteny
  - Presence / absence or SNPs

Alrighty, I think I will just try and familiarize myself with some of CoGe's tools. Do a comparison between Col-0 and just three other accessions taken from: Multiple reference genomes and transcriptomes for Arabidopsis thaliana. Xiangchao, Gan, et. al. (2011)

Three other accessions: Tsu-0 (Japan) CS6874, Can-0 (Canary Isles) CS6660, Oy-0 (Norway) CS6824

Download the full genome and upload to CoGe


$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/fasta/MASKED/tsu_0.v7.PR_in_lowercase.fas
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/fasta/MASKED/can_0.v7.PR_in_lowercase.fas
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/fasta/MASKED/oy_0.v7.PR_in_lowercase.fas

From 1001 Genomes website:
files of annotatations (GFF3, GTF and other formats)
denovo annotations predicted using mGene.ngs and the seedling RNA-seq data, independently of the TAIR10 annotations. This directory contains de novo gene annotations for the 19 accessions (*..*). We provide two formats (gene finder format version 3: *.gff3 and matlab/octave data files: *.mat) in two coordinate systems (reference genome: *.Col-0.{gff3,mat} and strain coordinate system: rest).

Four possible data files: 
	
http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.Col-0.gff3.bz2

http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.Col-0.mat

http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.gff3.bz2

http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.mat

Since we want to do some CNS search I think it will be best to get in Col-0 coordinates... but we want to extract regions upstream from full sequence files which correspond to given reference sequence.. alright in that case then we should take the file if gff3 format in the strain coordinate system (4th one) yea that sounds good.

$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Oy_0.gff3.bz2
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Can_0.gff3.bz2
$ curl -O http://mtweb.cs.ucl.ac.uk/mus/www/19genomes/annotations/denovo_annotation_9.4.2011/gene_models/denovo_annotation.Tsu_0.gff3.bz2

2-07-18
upload files to CoGe, not sure what to put for version so I'm just labeling them Gan_2011 for version and source

Seems like loading genome annotation did not work, try unzipping locally then uploading see if that works:
$ bzip2 -d <file_name>

uploading new annotations:
Can-0: https://genomevolution.org/r/10gzd
Oy-0: https://genomevolution.org/r/10gzl
Tsu-0: https://genomevolution.org/r/10gzn

did not work:
upload to hpcc, dos2unix, then try and upload to CoGe, idk what could be wrong
Can-0: https://genomevolution.org/r/10gzo
Oy-0: https://genomevolution.org/r/10gzp
Tsu-0: https://genomevolution.org/r/10gzq

Nope, nevermind seemed they all worked fine, look up how to remove a few

SynMap between Can-0 and Oy-0: https://genomevolution.org/r/10gzz
Just playing around for now, need to think of how to compare CNSs..... first need to call syntenic orthologs... shouldn't they carry the same annotation though?

I am a little concerned the genome size of these accessions is ~117Mb, seems pretty small may be incomplete. Well Tair10 is 119 so I think its fine

Example of synmap times:
Generating fasta file				Completed in 1m 54.0s
Generating fasta file				Completed in 1m 48.0s
Generating LastDB				Completed in 2m 0.6s
Running genome comparison			Completed in 28.8s
Creating BED files				Completed in 20.2s
Filtering tandem dups				Completed in 36.1s
Formatting for DAGChainer			Completed in 0.7s
Converting to genomic order			Completed in 1.3s
Running DAGChainer				Completed in 4.0s
Converting to genomic coordinates		Completed in 0.3s
Generating svg image				Completed in 1.0s
Generating images				Completed in 1.1s
Processing Subject Tandem Duplicate File	Completed in 0.8s
Processing Query Tandem Duplicate File		Completed in 0.8s
Generating GEvo links to condensed file 	Completed in 1.0s


From what I read online, it seems DAGChainer output in genomic coordinates is what I want, Example of the file format found: https://genomevolution.org/wiki/index.php/SynMap

DAGChainer output should give me the list of syntenic orthologs that I should use to search for CNSs. Hmm, how to do multispecies comparisons, should I try to create the DAGChainer pipeline locally or what?? Do I call all syntenic orthologs back to Col-0 or is there a way to call them across all accessions??

I have: a way to call syntenic orthologs between two organisms. Pretty slow though, next steps:
	1.) parse file to create file in the format Col-0 id, start, stop, Acc id, start, stop
		- Think a little more what info this file needs
		- Add in info for all accessions in same file, I think just IDs starts and stops will be needed wrench in the plan though is the annotation. They are not just full genes, exon / CDS information, how to parse????
	2.) Extract orthologous gene pairs for which we have CNSs called
	3.) Extract 5kb upstream all gene pairs
		- That shouldn't be too hard to get in fasta format, right?
	4.) what format do I need to compare CNSs? what comparisons do I want to do?
		- presence / absence... HOW?
			- Look in regions upstream orthologous gene pairs. If CNS located in Col-0, search region upstream Accession for this CNS, if exact match, then present, if no exact match, then absent / mutated
			- Blast the CNS if present against upstream ortholog, look for good hit, yea this later part is coming together nicely, the hard part is high throughput calling orthologs, extracting exact gene start information
			
First step is to parse DAGChainer output and create syntenic ortholog file??? Actually shouldn't that file be sufficient for the next step? Could think of a way to consolidate them all to one file

Will they all be 1:1? I think this filters out tandem duplicates so they should be, but across other species they might be because of duplication / losses / differential retention yada yada yada. Will be easier to rewrite then start from scratch so lets start under some assumptions and just get writing

2.) Extract orthologous gene pairs for which we have CNSs called
	- Create list of AT Col-0 annotated gene IDs for which there is a CNS
		- call it col_0_gene_cns.txt
$ grep "AT[1-5]" CNS_Brassicaceae_65K_4Alan.txt | cut -d"_" -f2 | sort | uniq | cat > col_0_gene_cns.txt

gives us a sorted list of all AT Col-0 gene IDs with a cns, the rest in the file were rna associated (~1500) or cryptic (72)

$ wc -l col_0_gene_cns.txt
11630 col_0_gene_cns.txt


This file can be used to parse the DAGChainer output to extract syntenic ortholog pair coordinates, final output from this extraction should be fasta format >accession_gene_id\n5kb upstream

Do I really want fasta format? To blast I want to make sure my subject matches what the query is supposed to be. I guess I could blast against the whole thing and parse the blast output for hits within the desired subject

Yea blast complete set of CNSs against complete set of upstream regions, Then for each CNS, if sig hit in Col-0 subject, search for hit in desired accession subject. If hit present above certain bit score, add to count and probably print out to a file syntenic pair with hit output and what the CNS is, have second file for syntenic pair for which cns was present in col-0 but absent in accession, for first run just throw everything that didn't hit in every accession to this file.

Lets roll through this process for Col-0 against Can-0.

Syn-map Col-0 against Can-0: https://genomevolution.org/r/10h2r

Print out only lines that have one of the AT col-0 genes as part of a pair. Nice done

Next step use the cns_dagchainer file to create the fasta file containing upstream sequences. That will be a little more difficult. Could it be taken from the whole genome file from each accession?? seems to be the only way to do it, check out the whole genome file for how we want to get the sequences. There has to be a program that does it for you / faster right?

Hmm, >Chr#
Then X characters per line, could do something with that, multiply to get to numbers you need, could program it in perl but would seriously take forever I believe.. Ask if there is a quicker way

	faidx
	samtools faidx <ref.fasta> [region1 [...]]

	Index reference sequence in the FASTA format or extract subsequence from indexed reference sequence. If no region is specified, 	faidx will index the file and create <ref.fasta>.fai on the disk. If regions are specified, the subsequences will be retrieved 		and printed to stdout in the FASTA format.

	The input file can be compressed in the BGZF format.

	The sequences in the input file should all have different names. If they do not, indexing will emit a warning about duplicate 		sequences and retrieval will only produce subsequences from the first sequence with the duplicated name.

I'm going to do this....

[yoccaala@dev-intel16-k80 full_genome_sequences]$ module load SAMTools/1.2
[yoccaala@dev-intel16-k80 full_genome_sequences]$ samtools faidx can_0.v7.PR_inlowercase.fas
#builds index file <fasta>.fai
[yoccaala@dev-intel16-k80 full_genome_sequences]$ samtools faidx can_0.v7.PR_inlowercase.fas Chr1:1042772-1043550
#outputs to stdout what you want... couldn't find a way to specify output file, would have to pipe

Alrighty, now we need to write scripty script script. For each line in cns_dagchainer file, go to gene ID, check which accession it belongs to, open that accessions full genome sequence, extract 5kb upstream from start site if + strand, 5kb downstream end site if - strand. Do some manual inspection to see if +/- strand matters

a16911_1	1||3760||5630||AT1G01010.1||1||CDS||306206330||1||99.84	3760	5630	b37385_1	1||3437||5287||CDS:AT1G01010-Can_0-mGene.NGS.1||1||CDS||1719340271||1||99.84	3437	5287	1.000000e-250	50
a16911_1	1||6915||8666||AT1G01020.1||-1||CDS||306206333||2||99.34	8666	6915	b37385_1	1||6613||8359||CDS:AT1G01020-Can_0-mGene.NGS.1||-1||CDS||1719340272||4||99.34	8359	6613	2.200000e-209	100

Examples of + / - strand:
AT1G01010 +
CNS:
	>33231_AT1G01010
	GAGTAAAATCTTTTCTTACAAGGGAAGTCCC
5kb upstream in Col-0
	
	
	
AT1G01020 -

